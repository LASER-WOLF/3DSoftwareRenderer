///////////////////////////////////////////////////////////////////////////////
3D Computer Graphics Programming
https://pikuma.com/courses/learn-3d-computer-graphics-programming
///////////////////////////////////////////////////////////////////////////////

BOOKS / RESOURCES:
- Foundations of Game Engine Development (Eric Lengyel): https://foundationsofgameenginedev.com/
- Graphics Programming Black Book (Michael Abrash): https://www.drdobbs.com/parallel/graphics-programming-black-book/184404919
- Real-Time Rendering, Fourth Edition: https://www.realtimerendering.com/
- GPU Gems: https://developer.nvidia.com/gpugems/gpugems
- Building a PS1 style retro 3D renderer: https://www.david-colson.com/2021/11/30/ps1-style-renderer.html
- Rasterization Rules & the Edge Function (ScratchAPixel.com): https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/rasterization-stage
- Rasterization Rules (Microsoft Direct3D): https://docs.microsoft.com/en-us/windows/win32/direct3d9/rasterization-rules#triangle-rasterization-rules
- (1/3) A Parallel Algorithm for Polygon Rasterization (Juan Pineda): https://www.cs.drexel.edu/~deb39/Classes/Papers/comp175-06-pineda.pdf
- (2/3) Optimizing the basic rasterizer (Fabian Giesen): https://fgiesen.wordpress.com/2013/02/10/optimizing-the-basic-rasterizer/
- (3/3) A fast and precise triangle rasterizer (Kristoffer Dyrkorn): https://kristoffer-dyrkorn.github.io/triangle-rasterizer/
- Texture Mapping Technical Articles (Chris Hecker): https://www.chrishecker.com/Miscellaneous_Technical_Articles
- Perspective-Correct Interpolation paper: https://s3.amazonaws.com/thinkific/file_uploads/167815/attachments/c06/b72/f58/KokLimLow-PerspectiveCorrectInterpolation.pdf
- On-Line Computer Graphics Notes - Clipping: https://import.cdn.thinkific.com/167815/JoyKennethClipping-200905-175314.pdf

NOTES:
- Linear interpolation equation: I = Q₁ + t(Q₂ - Q₁)
- Barycentric coordinates in triangles uses three weigths, alpha, beta and gamma (P = α,β,γ) with values 0-1 and the sum of all three weights is always 1.
- Texturing: Triangle has three UV points and uses barycentric coordinates to find the correct texel (texure pixel) for the 2D pixel inside the triangle
- Texturing: Vertices have UV coordinates that represents position on texture
- Line drawing algorithms: DDA (easy to undertand) and Bresenham (fast)
- Line equation: if m is 1 the line is 45° (x and y changing by the same number)
- Line equation: m is tangent
- Line equation: m tells us how fast y changes in comparison to x (rise (m over 1) / run (m under 1))
- Line equation: m = Δy / Δx (Δy is change in y and Δx is change in x)
- Line equation: y = mx + c (m is the slope, c is the y-intercept value)
- Sin: s = o / h
- Cos: c = a / h
- Tan: t = o / a
- Triangle: a (adjacent), o (opposite), h (hypotenuse)

TODO:
- Replace pi number with pi const (main.c)
- Add font rendering (text.h / text.c)
- Add multiple layers of color buffers that combines to "main" color buffer: background->3d->effects->ui->animations (update layers when needed, high framerate for main layer, but lower framerate for 3d rendering)
- Add transparancy to color buffer layers by using SDL_SetColorKey
- Add FPS counter
- Debug: Vizualize light direction
- Debug: Vizualize normals
- Add mouse position tracking and mouse controls (using SDL_GetMouseState)
- Add controls to move up / down (R & F keys)
- Add controls to strafe (A & D keys)
- Add persistent velocity movement for camera
- Change triangle rasterizer to parallel algorithm
- Lack of performance checks
- Excess of global variables
- Most parameters are being passed by value (change to reference/pointer)
- Check for memory leaks (use a debugger (gdb) or a profiler (valgrind))
- Move face culling to after the perspective projection using "signed face area" technique
- Move clipping to "clipping space" between projection and perspective divide
- Object culling in two phases, broad (per mesh with bounding box) and narrow (per triangle/vertex)
- Add dithering to shaded triangles
- Add shadows
- Add gouraud shading
- Change render pipeline to use floating point coordinates?
- Change png color decoding and SDL rendering from RGBA32 -> ARGB8888?
- Change DDA line drawing algorithm to Bresenham?
- Multithreading

DONE:
- Light: Set intensity
- Move texture_width, texture_height and texture_buffer from texel function to triangle function
- Add light to textured triangles

BUGS:

VERSION HISTORY:
	# Twenty-first:
		- Updated todo.txt added gamedev_resources.txt and added source code for new triangle rasterization in triangle.c
	# Twentieth:
		- Added light intensity in light_t
		- Added lighting to textured triangles
		- Removed color from triangle_t and face_t and added light to triangle_t
	# Nineteenth:
		(Multiple Meshes)
		- Finishing up the implementation, cleaning up code in main.c and making it more readable
		- Refactored code and added support for multiple meshes
	# Eighteenth:
		(Code Polishing & Refactoring)
		- Added camera pitch and changed camera controls
		- Refactored global variables to static in camera.h
		- Refactored global variables to static in light.h
		- Added low-res rendering by setting the window_width and window_height to a lower value that the SDL window
		- Changed the global variables in display.h to static and refactored code with getters and setters
	# Seventeenth:
		(Clipping)
		- Added clipping to the render pipeline in main.c -> update()
		- Added function to clip polygon against plane
		- Added function to convert triangle to polygon and polygon to triangles
		- Added polygon_t
		- Added camera frustum clipping planes (left, right, top, bottom, near, far) that are initialized in setup() in main.c
		- Added plane_t
		- Added clipping.h / clipping.c
	# Sixteenth:
		(Z-buffer and Camera)
		- Added simple FPS camera controller (wasd + up/down controls)
		- Added variable delta-time
		- Added camera and view matrix for transforming the vertices to camera space
		- Added mat4_look_at() to make a matrix for looking at a target position
		- Added camera.h / camera.c with camera_t
		- Replaced dynamic array with static array for triangles_to_render in main.c (to improve performance)
		- Removed painter's alogrithm depth sorting (replaced with z-buffer)
		- Added Z-buffer (for textured triangles and filled triangles)
	# Fifteenth:
		(Textured OBJ Files)
		- BUG FIX: Added limit on interpolated UV coords in draw_texel() to stay within texture width/height (to prevent texture buffer overflow due to inaccuracy caused by using int instead of float for x and y)
		- Added loading of UV coords from obj file
	# Fourteenth:
		(Perspective Correct Textures and Decoding PNG Files)
		- Added function to load PNG files using upng.h / upng.c
		- Added perspective correct interpolation to draw_texel()
		- Finished draw_textured_triangle()
		- Fixed typos in vector.c
	# Thirteenth:
		(Perspective Correct Textures)
		- Added draw_texel() function
	# Twelfth:
		(Texture Mapping)
		- Added UNFINISHED (missing the color information from the texels, currently has a placeholder color) function to draw textured triangles
		- Added function to find barycentric coordinates for a point on a triangle
		- Added swap.h & swap.c (with functions for swapping ints and floats)
		- Added new render mode (textured triangle)
		- Added uv texture coords to triangles and faces
		- Added tex2_t
		- Added texture.h & texture.c
	# Eleventh:
		(Projection matrix & Light and shading)
		- Added flat shading lighting to rendering
		- Added light.h and light.c with global light type and light intensity function
		- Changed projection to use the projection matrix
		- Added projection matrix and accompanying functions (mat4_make_perspective and mat4_mul_vec4_project)
	# Tenth:
		(Matrices)
		- Added world matrix (combining scaling, rotation and translation)
	# Ninth:
		(Matrices)
		- Added matrix rotation function
		- Added matrix translation function
		- Added matrix scaling function
		- Added identity matrix
		- Added matrix multiplication function
		- Added mat4_t and vec4_t
		- Added matrix.h and matrix.c
	# Eighth:
		(Vector Operations, Triangle Rasterization & Sorting Faces by Depth)
		- Added simple z sorting of faces with painter algorithm
		- Added color value to faces
		- Added buttons to change rendering mode (Keyboard button 1-4) and butons to enable/disable backface culling (C and D)
		- Added filled triangle rendering
		- Added backface culling
		- Added several new vector functions
	# Seventh:
		(Dynamic Arrays & OBJ Files)
		- Added function to load (and render) .obj file
	# Sixth:
		(Line Drawing)
		- Added function to draw triangle
		- Added function to draw line with DDA line drawing algorithm
	# Fifth:
		(Linear Transformations, Fixed Time Step & Triangles and Vertices)
		- Added rendering of the vertexes of the cube
		- Manually made a cube with 8 vertexes (one on each corner of the cube) and 12 faces (two triangles to form a plane on each side of the cube)
		- Added triangle_t for 2d triangles (containing three vec2 points)
		- Added face_t for faces (containing a, b, c. index values for vertexes)
		- Added triangle and mesh files
		- Added max framerate to game loop
		- Added x, y and z rotation for vec3 points
	# Fourth:
		(Projecting Points)
		- Added perspective projection
	# Third:
		(Multiple Header Files, Vectors and Points & Projecting Points)
		- Added project function with orthographic projection of vec3 points
		- Made cube filled with vec3 points
		- Added vector.h and vector.c with vec2_t and vec3_t
		- Added draw_pixel function
		- Making display.h and display.c and moving display/window related code to new file
	# Second:
		(SDL, Setup and Color Buffer)
		- Added draw rectangle function
		- Added background grid
		- Added fullscreen
	# First:
		(Introduction, Compiling our Project & SDL Setup and Color Buffer)
		- Added color buffer
		- SDL, SDL window, SDL renderer and game loop setup

///////////////////////////////////////////////////////////////////////////////
3D Computer Graphics Programming
https://pikuma.com/courses/learn-3d-computer-graphics-programming
///////////////////////////////////////////////////////////////////////////////

COURSE NOTES:
- Linear interpolation equation: I = Q₁ + t(Q₂ - Q₁)
- Barycentric coordinates in triangles uses three weigths, alpha, beta and gamma (P = α,β,γ) with values 0-1 and the sum of all three weights is always 1.
- Texturing: Triangle has three UV points and uses barycentric coordinates to find the correct texel (texure pixel) for the 2D pixel inside the triangle
- Texturing: Vertices have UV coordinates that represents position on texture
- Line drawing algorithms: DDA (easy to undertand) and Bresenham (fast)
- Line equation: if m is 1 the line is 45° (x and y changing by the same number)
- Line equation: m is tangent
- Line equation: m tells us how fast y changes in comparison to x (rise (m over 1) / run (m under 1))
- Line equation: m = Δy / Δx (Δy is change in y and Δx is change in x)
- Line equation: y = mx + c (m is the slope, c is the y-intercept value)
- Sin: s = o / h
- Cos: c = a / h
- Tan: t = o / a
- Triangle: a (adjacent), o (opposite), h (hypotenuse)

BOOKS / RESOURCES:
- Foundations of Game Engine Development (Eric Lengyel): https://foundationsofgameenginedev.com/
- Graphics Programming Black Book (Michael Abrash): https://www.drdobbs.com/parallel/graphics-programming-black-book/184404919
- Real-Time Rendering, Fourth Edition: https://www.realtimerendering.com/
- GPU Gems: https://developer.nvidia.com/gpugems/gpugems
- Building a PS1 style retro 3D renderer: https://www.david-colson.com/2021/11/30/ps1-style-renderer.html
- Rasterization Rules & the Edge Function (ScratchAPixel.com): https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/rasterization-stage
- Rasterization Rules (Microsoft Direct3D): https://docs.microsoft.com/en-us/windows/win32/direct3d9/rasterization-rules#triangle-rasterization-rules
- (1/3) A Parallel Algorithm for Polygon Rasterization (Juan Pineda): https://www.cs.drexel.edu/~deb39/Classes/Papers/comp175-06-pineda.pdf
- (2/3) Optimizing the basic rasterizer (Fabian Giesen): https://fgiesen.wordpress.com/2013/02/10/optimizing-the-basic-rasterizer/
- (3/3) A fast and precise triangle rasterizer (Kristoffer Dyrkorn): https://kristoffer-dyrkorn.github.io/triangle-rasterizer/
- Texture Mapping Technical Articles (Chris Hecker): https://www.chrishecker.com/Miscellaneous_Technical_Articles
- Perspective-Correct Interpolation paper: https://s3.amazonaws.com/thinkific/file_uploads/167815/attachments/c06/b72/f58/KokLimLow-PerspectiveCorrectInterpolation.pdf
- On-Line Computer Graphics Notes - Clipping: https://import.cdn.thinkific.com/167815/JoyKennethClipping-200905-175314.pdf

TODO:
- Replace pi number with pi const (main.c)
- Add font rendering (text.h / text.c)
- Add multiple layers of color buffers that combines to "main" color buffer: background->3d->effects->ui->animations (update layers when needed, high framerate for main layer, but lower framerate for 3d rendering)
- Add transparancy to color buffer layers by using SDL_SetColorKey
- Add FPS counter
- Debug: Vizualize light direction
- Debug: Vizualize normals
- Add mouse position tracking and mouse controls (using SDL_GetMouseState)
- Add controls to move up / down (R & F keys)
- Add controls to strafe (A & D keys)
- Add persistent velocity movement for camera
- Change triangle rasterizer to parallel algorithm
- Lack of performance checks
- Excess of global variables
- Most parameters are being passed by value (change to reference/pointer)
- Check for memory leaks (use a debugger (gdb) or a profiler (valgrind))
- Move face culling to after the perspective projection using "signed face area" technique
- Move clipping to "clipping space" between projection and perspective divide
- Object culling in two phases, broad (per mesh with bounding box) and narrow (per triangle/vertex)
- Add dithering to shaded triangles
- Add shadows
- Add gouraud shading
- Change render pipeline to use floating point coordinates?
- Change png color decoding and SDL rendering from RGBA32 -> ARGB8888?
- Change DDA line drawing algorithm to Bresenham?
- Multithreading
